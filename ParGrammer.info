-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from ParGrammer.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pExpr -> Expr                               (0)
	Ident -> L_Ident                                   (1)
	Integer -> L_integ                                 (2)
	ArOp -> '+'                                        (3)
	ArOp -> '-'                                        (4)
	ArOp -> '*'                                        (5)
	ArOp -> '//'                                       (6)
	CompOp -> '=='                                     (7)
	CompOp -> '!='                                     (8)
	CompOp -> '>'                                      (9)
	CompOp -> '>='                                     (10)
	CompOp -> '<'                                      (11)
	CompOp -> '<='                                     (12)
	BoolOp -> 'and'                                    (13)
	BoolOp -> 'or'                                     (14)
	Expr -> Integer                                    (15)
	Expr -> 'true'                                     (16)
	Expr -> 'false'                                    (17)
	Expr -> '[' ListExpr ']'                           (18)
	Expr -> 'head' Expr                                (19)
	Expr -> 'tail' Expr                                (20)
	Expr -> 'empty' Expr                               (21)
	Expr -> ArOp Expr Expr                             (22)
	Expr -> CompOp Expr Expr                           (23)
	Expr -> BoolOp Expr Expr                           (24)
	Expr -> '\\' Ident ListIdent '->' Expr             (25)
	Expr -> Ident 'args' ListExpr 'endargs'            (26)
	Expr -> 'if' Expr 'then' Expr 'else' Expr 'endif'   (27)
	Expr -> Ident                                      (28)
	Expr -> 'let' Ident ListIdent '=' Expr 'in' Expr 'endlet'   (29)
	ListExpr ->                                        (30)
	ListExpr -> Expr                                   (31)
	ListExpr -> Expr ',' ListExpr                      (32)
	ListIdent ->                                       (33)
	ListIdent -> Ident ListIdent                       (34)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'!='           { PT _ (TS _ 1) }
	'*'            { PT _ (TS _ 2) }
	'+'            { PT _ (TS _ 3) }
	','            { PT _ (TS _ 4) }
	'-'            { PT _ (TS _ 5) }
	'->'           { PT _ (TS _ 6) }
	'//'           { PT _ (TS _ 7) }
	'<'            { PT _ (TS _ 8) }
	'<='           { PT _ (TS _ 9) }
	'='            { PT _ (TS _ 10) }
	'=='           { PT _ (TS _ 11) }
	'>'            { PT _ (TS _ 12) }
	'>='           { PT _ (TS _ 13) }
	'['            { PT _ (TS _ 14) }
	'\\'           { PT _ (TS _ 15) }
	']'            { PT _ (TS _ 16) }
	'and'          { PT _ (TS _ 17) }
	'args'         { PT _ (TS _ 18) }
	'else'         { PT _ (TS _ 19) }
	'empty'        { PT _ (TS _ 20) }
	'endargs'      { PT _ (TS _ 21) }
	'endif'        { PT _ (TS _ 22) }
	'endlet'       { PT _ (TS _ 23) }
	'false'        { PT _ (TS _ 24) }
	'head'         { PT _ (TS _ 25) }
	'if'           { PT _ (TS _ 26) }
	'in'           { PT _ (TS _ 27) }
	'let'          { PT _ (TS _ 28) }
	'or'           { PT _ (TS _ 29) }
	'tail'         { PT _ (TS _ 30) }
	'then'         { PT _ (TS _ 31) }
	'true'         { PT _ (TS _ 32) }
	L_Ident        { PT _ (TV $$) }
	L_integ        { PT _ (TI $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pExpr    rule  0
	Ident           rule  1
	Integer         rule  2
	ArOp            rules 3, 4, 5, 6
	CompOp          rules 7, 8, 9, 10, 11, 12
	BoolOp          rules 13, 14
	Expr            rules 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29
	ListExpr        rules 30, 31, 32
	ListIdent       rules 33, 34

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_pExpr -> . Expr                              (rule 0)

	'!='           shift, and enter state 9
	'*'            shift, and enter state 10
	'+'            shift, and enter state 11
	'-'            shift, and enter state 12
	'//'           shift, and enter state 13
	'<'            shift, and enter state 14
	'<='           shift, and enter state 15
	'=='           shift, and enter state 16
	'>'            shift, and enter state 17
	'>='           shift, and enter state 18
	'['            shift, and enter state 19
	'\\'           shift, and enter state 20
	'and'          shift, and enter state 21
	'empty'        shift, and enter state 22
	'false'        shift, and enter state 23
	'head'         shift, and enter state 24
	'if'           shift, and enter state 25
	'let'          shift, and enter state 26
	'or'           shift, and enter state 27
	'tail'         shift, and enter state 28
	'true'         shift, and enter state 29
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 30

	Ident          goto state 3
	Integer        goto state 4
	ArOp           goto state 5
	CompOp         goto state 6
	BoolOp         goto state 7
	Expr           goto state 8

State 1

	Ident -> . L_Ident                                  (rule 1)

	L_Ident        shift, and enter state 2


State 2

	Ident -> L_Ident .                                  (rule 1)

	'!='           reduce using rule 1
	'*'            reduce using rule 1
	'+'            reduce using rule 1
	','            reduce using rule 1
	'-'            reduce using rule 1
	'->'           reduce using rule 1
	'//'           reduce using rule 1
	'<'            reduce using rule 1
	'<='           reduce using rule 1
	'='            reduce using rule 1
	'=='           reduce using rule 1
	'>'            reduce using rule 1
	'>='           reduce using rule 1
	'['            reduce using rule 1
	'\\'           reduce using rule 1
	']'            reduce using rule 1
	'and'          reduce using rule 1
	'args'         reduce using rule 1
	'else'         reduce using rule 1
	'empty'        reduce using rule 1
	'endargs'      reduce using rule 1
	'endif'        reduce using rule 1
	'endlet'       reduce using rule 1
	'false'        reduce using rule 1
	'head'         reduce using rule 1
	'if'           reduce using rule 1
	'in'           reduce using rule 1
	'let'          reduce using rule 1
	'or'           reduce using rule 1
	'tail'         reduce using rule 1
	'then'         reduce using rule 1
	'true'         reduce using rule 1
	L_Ident        reduce using rule 1
	L_integ        reduce using rule 1
	%eof           reduce using rule 1


State 3

	Expr -> Ident . 'args' ListExpr 'endargs'           (rule 26)
	Expr -> Ident .                                     (rule 28)

	'!='           reduce using rule 28
	'*'            reduce using rule 28
	'+'            reduce using rule 28
	','            reduce using rule 28
	'-'            reduce using rule 28
	'//'           reduce using rule 28
	'<'            reduce using rule 28
	'<='           reduce using rule 28
	'=='           reduce using rule 28
	'>'            reduce using rule 28
	'>='           reduce using rule 28
	'['            reduce using rule 28
	'\\'           reduce using rule 28
	']'            reduce using rule 28
	'and'          reduce using rule 28
	'args'         shift, and enter state 42
	'else'         reduce using rule 28
	'empty'        reduce using rule 28
	'endargs'      reduce using rule 28
	'endif'        reduce using rule 28
	'endlet'       reduce using rule 28
	'false'        reduce using rule 28
	'head'         reduce using rule 28
	'if'           reduce using rule 28
	'in'           reduce using rule 28
	'let'          reduce using rule 28
	'or'           reduce using rule 28
	'tail'         reduce using rule 28
	'then'         reduce using rule 28
	'true'         reduce using rule 28
	L_Ident        reduce using rule 28
	L_integ        reduce using rule 28
	%eof           reduce using rule 28


State 4

	Expr -> Integer .                                   (rule 15)

	'!='           reduce using rule 15
	'*'            reduce using rule 15
	'+'            reduce using rule 15
	','            reduce using rule 15
	'-'            reduce using rule 15
	'//'           reduce using rule 15
	'<'            reduce using rule 15
	'<='           reduce using rule 15
	'=='           reduce using rule 15
	'>'            reduce using rule 15
	'>='           reduce using rule 15
	'['            reduce using rule 15
	'\\'           reduce using rule 15
	']'            reduce using rule 15
	'and'          reduce using rule 15
	'else'         reduce using rule 15
	'empty'        reduce using rule 15
	'endargs'      reduce using rule 15
	'endif'        reduce using rule 15
	'endlet'       reduce using rule 15
	'false'        reduce using rule 15
	'head'         reduce using rule 15
	'if'           reduce using rule 15
	'in'           reduce using rule 15
	'let'          reduce using rule 15
	'or'           reduce using rule 15
	'tail'         reduce using rule 15
	'then'         reduce using rule 15
	'true'         reduce using rule 15
	L_Ident        reduce using rule 15
	L_integ        reduce using rule 15
	%eof           reduce using rule 15


State 5

	Expr -> ArOp . Expr Expr                            (rule 22)

	'!='           shift, and enter state 9
	'*'            shift, and enter state 10
	'+'            shift, and enter state 11
	'-'            shift, and enter state 12
	'//'           shift, and enter state 13
	'<'            shift, and enter state 14
	'<='           shift, and enter state 15
	'=='           shift, and enter state 16
	'>'            shift, and enter state 17
	'>='           shift, and enter state 18
	'['            shift, and enter state 19
	'\\'           shift, and enter state 20
	'and'          shift, and enter state 21
	'empty'        shift, and enter state 22
	'false'        shift, and enter state 23
	'head'         shift, and enter state 24
	'if'           shift, and enter state 25
	'let'          shift, and enter state 26
	'or'           shift, and enter state 27
	'tail'         shift, and enter state 28
	'true'         shift, and enter state 29
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 30

	Ident          goto state 3
	Integer        goto state 4
	ArOp           goto state 5
	CompOp         goto state 6
	BoolOp         goto state 7
	Expr           goto state 41

State 6

	Expr -> CompOp . Expr Expr                          (rule 23)

	'!='           shift, and enter state 9
	'*'            shift, and enter state 10
	'+'            shift, and enter state 11
	'-'            shift, and enter state 12
	'//'           shift, and enter state 13
	'<'            shift, and enter state 14
	'<='           shift, and enter state 15
	'=='           shift, and enter state 16
	'>'            shift, and enter state 17
	'>='           shift, and enter state 18
	'['            shift, and enter state 19
	'\\'           shift, and enter state 20
	'and'          shift, and enter state 21
	'empty'        shift, and enter state 22
	'false'        shift, and enter state 23
	'head'         shift, and enter state 24
	'if'           shift, and enter state 25
	'let'          shift, and enter state 26
	'or'           shift, and enter state 27
	'tail'         shift, and enter state 28
	'true'         shift, and enter state 29
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 30

	Ident          goto state 3
	Integer        goto state 4
	ArOp           goto state 5
	CompOp         goto state 6
	BoolOp         goto state 7
	Expr           goto state 40

State 7

	Expr -> BoolOp . Expr Expr                          (rule 24)

	'!='           shift, and enter state 9
	'*'            shift, and enter state 10
	'+'            shift, and enter state 11
	'-'            shift, and enter state 12
	'//'           shift, and enter state 13
	'<'            shift, and enter state 14
	'<='           shift, and enter state 15
	'=='           shift, and enter state 16
	'>'            shift, and enter state 17
	'>='           shift, and enter state 18
	'['            shift, and enter state 19
	'\\'           shift, and enter state 20
	'and'          shift, and enter state 21
	'empty'        shift, and enter state 22
	'false'        shift, and enter state 23
	'head'         shift, and enter state 24
	'if'           shift, and enter state 25
	'let'          shift, and enter state 26
	'or'           shift, and enter state 27
	'tail'         shift, and enter state 28
	'true'         shift, and enter state 29
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 30

	Ident          goto state 3
	Integer        goto state 4
	ArOp           goto state 5
	CompOp         goto state 6
	BoolOp         goto state 7
	Expr           goto state 39

State 8

	%start_pExpr -> Expr .                              (rule 0)

	%eof           accept


State 9

	CompOp -> '!=' .                                    (rule 8)

	'!='           reduce using rule 8
	'*'            reduce using rule 8
	'+'            reduce using rule 8
	'-'            reduce using rule 8
	'//'           reduce using rule 8
	'<'            reduce using rule 8
	'<='           reduce using rule 8
	'=='           reduce using rule 8
	'>'            reduce using rule 8
	'>='           reduce using rule 8
	'['            reduce using rule 8
	'\\'           reduce using rule 8
	'and'          reduce using rule 8
	'empty'        reduce using rule 8
	'false'        reduce using rule 8
	'head'         reduce using rule 8
	'if'           reduce using rule 8
	'let'          reduce using rule 8
	'or'           reduce using rule 8
	'tail'         reduce using rule 8
	'true'         reduce using rule 8
	L_Ident        reduce using rule 8
	L_integ        reduce using rule 8


State 10

	ArOp -> '*' .                                       (rule 5)

	'!='           reduce using rule 5
	'*'            reduce using rule 5
	'+'            reduce using rule 5
	'-'            reduce using rule 5
	'//'           reduce using rule 5
	'<'            reduce using rule 5
	'<='           reduce using rule 5
	'=='           reduce using rule 5
	'>'            reduce using rule 5
	'>='           reduce using rule 5
	'['            reduce using rule 5
	'\\'           reduce using rule 5
	'and'          reduce using rule 5
	'empty'        reduce using rule 5
	'false'        reduce using rule 5
	'head'         reduce using rule 5
	'if'           reduce using rule 5
	'let'          reduce using rule 5
	'or'           reduce using rule 5
	'tail'         reduce using rule 5
	'true'         reduce using rule 5
	L_Ident        reduce using rule 5
	L_integ        reduce using rule 5


State 11

	ArOp -> '+' .                                       (rule 3)

	'!='           reduce using rule 3
	'*'            reduce using rule 3
	'+'            reduce using rule 3
	'-'            reduce using rule 3
	'//'           reduce using rule 3
	'<'            reduce using rule 3
	'<='           reduce using rule 3
	'=='           reduce using rule 3
	'>'            reduce using rule 3
	'>='           reduce using rule 3
	'['            reduce using rule 3
	'\\'           reduce using rule 3
	'and'          reduce using rule 3
	'empty'        reduce using rule 3
	'false'        reduce using rule 3
	'head'         reduce using rule 3
	'if'           reduce using rule 3
	'let'          reduce using rule 3
	'or'           reduce using rule 3
	'tail'         reduce using rule 3
	'true'         reduce using rule 3
	L_Ident        reduce using rule 3
	L_integ        reduce using rule 3


State 12

	ArOp -> '-' .                                       (rule 4)

	'!='           reduce using rule 4
	'*'            reduce using rule 4
	'+'            reduce using rule 4
	'-'            reduce using rule 4
	'//'           reduce using rule 4
	'<'            reduce using rule 4
	'<='           reduce using rule 4
	'=='           reduce using rule 4
	'>'            reduce using rule 4
	'>='           reduce using rule 4
	'['            reduce using rule 4
	'\\'           reduce using rule 4
	'and'          reduce using rule 4
	'empty'        reduce using rule 4
	'false'        reduce using rule 4
	'head'         reduce using rule 4
	'if'           reduce using rule 4
	'let'          reduce using rule 4
	'or'           reduce using rule 4
	'tail'         reduce using rule 4
	'true'         reduce using rule 4
	L_Ident        reduce using rule 4
	L_integ        reduce using rule 4


State 13

	ArOp -> '//' .                                      (rule 6)

	'!='           reduce using rule 6
	'*'            reduce using rule 6
	'+'            reduce using rule 6
	'-'            reduce using rule 6
	'//'           reduce using rule 6
	'<'            reduce using rule 6
	'<='           reduce using rule 6
	'=='           reduce using rule 6
	'>'            reduce using rule 6
	'>='           reduce using rule 6
	'['            reduce using rule 6
	'\\'           reduce using rule 6
	'and'          reduce using rule 6
	'empty'        reduce using rule 6
	'false'        reduce using rule 6
	'head'         reduce using rule 6
	'if'           reduce using rule 6
	'let'          reduce using rule 6
	'or'           reduce using rule 6
	'tail'         reduce using rule 6
	'true'         reduce using rule 6
	L_Ident        reduce using rule 6
	L_integ        reduce using rule 6


State 14

	CompOp -> '<' .                                     (rule 11)

	'!='           reduce using rule 11
	'*'            reduce using rule 11
	'+'            reduce using rule 11
	'-'            reduce using rule 11
	'//'           reduce using rule 11
	'<'            reduce using rule 11
	'<='           reduce using rule 11
	'=='           reduce using rule 11
	'>'            reduce using rule 11
	'>='           reduce using rule 11
	'['            reduce using rule 11
	'\\'           reduce using rule 11
	'and'          reduce using rule 11
	'empty'        reduce using rule 11
	'false'        reduce using rule 11
	'head'         reduce using rule 11
	'if'           reduce using rule 11
	'let'          reduce using rule 11
	'or'           reduce using rule 11
	'tail'         reduce using rule 11
	'true'         reduce using rule 11
	L_Ident        reduce using rule 11
	L_integ        reduce using rule 11


State 15

	CompOp -> '<=' .                                    (rule 12)

	'!='           reduce using rule 12
	'*'            reduce using rule 12
	'+'            reduce using rule 12
	'-'            reduce using rule 12
	'//'           reduce using rule 12
	'<'            reduce using rule 12
	'<='           reduce using rule 12
	'=='           reduce using rule 12
	'>'            reduce using rule 12
	'>='           reduce using rule 12
	'['            reduce using rule 12
	'\\'           reduce using rule 12
	'and'          reduce using rule 12
	'empty'        reduce using rule 12
	'false'        reduce using rule 12
	'head'         reduce using rule 12
	'if'           reduce using rule 12
	'let'          reduce using rule 12
	'or'           reduce using rule 12
	'tail'         reduce using rule 12
	'true'         reduce using rule 12
	L_Ident        reduce using rule 12
	L_integ        reduce using rule 12


State 16

	CompOp -> '==' .                                    (rule 7)

	'!='           reduce using rule 7
	'*'            reduce using rule 7
	'+'            reduce using rule 7
	'-'            reduce using rule 7
	'//'           reduce using rule 7
	'<'            reduce using rule 7
	'<='           reduce using rule 7
	'=='           reduce using rule 7
	'>'            reduce using rule 7
	'>='           reduce using rule 7
	'['            reduce using rule 7
	'\\'           reduce using rule 7
	'and'          reduce using rule 7
	'empty'        reduce using rule 7
	'false'        reduce using rule 7
	'head'         reduce using rule 7
	'if'           reduce using rule 7
	'let'          reduce using rule 7
	'or'           reduce using rule 7
	'tail'         reduce using rule 7
	'true'         reduce using rule 7
	L_Ident        reduce using rule 7
	L_integ        reduce using rule 7


State 17

	CompOp -> '>' .                                     (rule 9)

	'!='           reduce using rule 9
	'*'            reduce using rule 9
	'+'            reduce using rule 9
	'-'            reduce using rule 9
	'//'           reduce using rule 9
	'<'            reduce using rule 9
	'<='           reduce using rule 9
	'=='           reduce using rule 9
	'>'            reduce using rule 9
	'>='           reduce using rule 9
	'['            reduce using rule 9
	'\\'           reduce using rule 9
	'and'          reduce using rule 9
	'empty'        reduce using rule 9
	'false'        reduce using rule 9
	'head'         reduce using rule 9
	'if'           reduce using rule 9
	'let'          reduce using rule 9
	'or'           reduce using rule 9
	'tail'         reduce using rule 9
	'true'         reduce using rule 9
	L_Ident        reduce using rule 9
	L_integ        reduce using rule 9


State 18

	CompOp -> '>=' .                                    (rule 10)

	'!='           reduce using rule 10
	'*'            reduce using rule 10
	'+'            reduce using rule 10
	'-'            reduce using rule 10
	'//'           reduce using rule 10
	'<'            reduce using rule 10
	'<='           reduce using rule 10
	'=='           reduce using rule 10
	'>'            reduce using rule 10
	'>='           reduce using rule 10
	'['            reduce using rule 10
	'\\'           reduce using rule 10
	'and'          reduce using rule 10
	'empty'        reduce using rule 10
	'false'        reduce using rule 10
	'head'         reduce using rule 10
	'if'           reduce using rule 10
	'let'          reduce using rule 10
	'or'           reduce using rule 10
	'tail'         reduce using rule 10
	'true'         reduce using rule 10
	L_Ident        reduce using rule 10
	L_integ        reduce using rule 10


State 19

	Expr -> '[' . ListExpr ']'                          (rule 18)

	'!='           shift, and enter state 9
	'*'            shift, and enter state 10
	'+'            shift, and enter state 11
	'-'            shift, and enter state 12
	'//'           shift, and enter state 13
	'<'            shift, and enter state 14
	'<='           shift, and enter state 15
	'=='           shift, and enter state 16
	'>'            shift, and enter state 17
	'>='           shift, and enter state 18
	'['            shift, and enter state 19
	'\\'           shift, and enter state 20
	']'            reduce using rule 30
	'and'          shift, and enter state 21
	'empty'        shift, and enter state 22
	'false'        shift, and enter state 23
	'head'         shift, and enter state 24
	'if'           shift, and enter state 25
	'let'          shift, and enter state 26
	'or'           shift, and enter state 27
	'tail'         shift, and enter state 28
	'true'         shift, and enter state 29
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 30

	Ident          goto state 3
	Integer        goto state 4
	ArOp           goto state 5
	CompOp         goto state 6
	BoolOp         goto state 7
	Expr           goto state 37
	ListExpr       goto state 38

State 20

	Expr -> '\\' . Ident ListIdent '->' Expr            (rule 25)

	L_Ident        shift, and enter state 2

	Ident          goto state 36

State 21

	BoolOp -> 'and' .                                   (rule 13)

	'!='           reduce using rule 13
	'*'            reduce using rule 13
	'+'            reduce using rule 13
	'-'            reduce using rule 13
	'//'           reduce using rule 13
	'<'            reduce using rule 13
	'<='           reduce using rule 13
	'=='           reduce using rule 13
	'>'            reduce using rule 13
	'>='           reduce using rule 13
	'['            reduce using rule 13
	'\\'           reduce using rule 13
	'and'          reduce using rule 13
	'empty'        reduce using rule 13
	'false'        reduce using rule 13
	'head'         reduce using rule 13
	'if'           reduce using rule 13
	'let'          reduce using rule 13
	'or'           reduce using rule 13
	'tail'         reduce using rule 13
	'true'         reduce using rule 13
	L_Ident        reduce using rule 13
	L_integ        reduce using rule 13


State 22

	Expr -> 'empty' . Expr                              (rule 21)

	'!='           shift, and enter state 9
	'*'            shift, and enter state 10
	'+'            shift, and enter state 11
	'-'            shift, and enter state 12
	'//'           shift, and enter state 13
	'<'            shift, and enter state 14
	'<='           shift, and enter state 15
	'=='           shift, and enter state 16
	'>'            shift, and enter state 17
	'>='           shift, and enter state 18
	'['            shift, and enter state 19
	'\\'           shift, and enter state 20
	'and'          shift, and enter state 21
	'empty'        shift, and enter state 22
	'false'        shift, and enter state 23
	'head'         shift, and enter state 24
	'if'           shift, and enter state 25
	'let'          shift, and enter state 26
	'or'           shift, and enter state 27
	'tail'         shift, and enter state 28
	'true'         shift, and enter state 29
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 30

	Ident          goto state 3
	Integer        goto state 4
	ArOp           goto state 5
	CompOp         goto state 6
	BoolOp         goto state 7
	Expr           goto state 35

State 23

	Expr -> 'false' .                                   (rule 17)

	'!='           reduce using rule 17
	'*'            reduce using rule 17
	'+'            reduce using rule 17
	','            reduce using rule 17
	'-'            reduce using rule 17
	'//'           reduce using rule 17
	'<'            reduce using rule 17
	'<='           reduce using rule 17
	'=='           reduce using rule 17
	'>'            reduce using rule 17
	'>='           reduce using rule 17
	'['            reduce using rule 17
	'\\'           reduce using rule 17
	']'            reduce using rule 17
	'and'          reduce using rule 17
	'else'         reduce using rule 17
	'empty'        reduce using rule 17
	'endargs'      reduce using rule 17
	'endif'        reduce using rule 17
	'endlet'       reduce using rule 17
	'false'        reduce using rule 17
	'head'         reduce using rule 17
	'if'           reduce using rule 17
	'in'           reduce using rule 17
	'let'          reduce using rule 17
	'or'           reduce using rule 17
	'tail'         reduce using rule 17
	'then'         reduce using rule 17
	'true'         reduce using rule 17
	L_Ident        reduce using rule 17
	L_integ        reduce using rule 17
	%eof           reduce using rule 17


State 24

	Expr -> 'head' . Expr                               (rule 19)

	'!='           shift, and enter state 9
	'*'            shift, and enter state 10
	'+'            shift, and enter state 11
	'-'            shift, and enter state 12
	'//'           shift, and enter state 13
	'<'            shift, and enter state 14
	'<='           shift, and enter state 15
	'=='           shift, and enter state 16
	'>'            shift, and enter state 17
	'>='           shift, and enter state 18
	'['            shift, and enter state 19
	'\\'           shift, and enter state 20
	'and'          shift, and enter state 21
	'empty'        shift, and enter state 22
	'false'        shift, and enter state 23
	'head'         shift, and enter state 24
	'if'           shift, and enter state 25
	'let'          shift, and enter state 26
	'or'           shift, and enter state 27
	'tail'         shift, and enter state 28
	'true'         shift, and enter state 29
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 30

	Ident          goto state 3
	Integer        goto state 4
	ArOp           goto state 5
	CompOp         goto state 6
	BoolOp         goto state 7
	Expr           goto state 34

State 25

	Expr -> 'if' . Expr 'then' Expr 'else' Expr 'endif'    (rule 27)

	'!='           shift, and enter state 9
	'*'            shift, and enter state 10
	'+'            shift, and enter state 11
	'-'            shift, and enter state 12
	'//'           shift, and enter state 13
	'<'            shift, and enter state 14
	'<='           shift, and enter state 15
	'=='           shift, and enter state 16
	'>'            shift, and enter state 17
	'>='           shift, and enter state 18
	'['            shift, and enter state 19
	'\\'           shift, and enter state 20
	'and'          shift, and enter state 21
	'empty'        shift, and enter state 22
	'false'        shift, and enter state 23
	'head'         shift, and enter state 24
	'if'           shift, and enter state 25
	'let'          shift, and enter state 26
	'or'           shift, and enter state 27
	'tail'         shift, and enter state 28
	'true'         shift, and enter state 29
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 30

	Ident          goto state 3
	Integer        goto state 4
	ArOp           goto state 5
	CompOp         goto state 6
	BoolOp         goto state 7
	Expr           goto state 33

State 26

	Expr -> 'let' . Ident ListIdent '=' Expr 'in' Expr 'endlet'    (rule 29)

	L_Ident        shift, and enter state 2

	Ident          goto state 32

State 27

	BoolOp -> 'or' .                                    (rule 14)

	'!='           reduce using rule 14
	'*'            reduce using rule 14
	'+'            reduce using rule 14
	'-'            reduce using rule 14
	'//'           reduce using rule 14
	'<'            reduce using rule 14
	'<='           reduce using rule 14
	'=='           reduce using rule 14
	'>'            reduce using rule 14
	'>='           reduce using rule 14
	'['            reduce using rule 14
	'\\'           reduce using rule 14
	'and'          reduce using rule 14
	'empty'        reduce using rule 14
	'false'        reduce using rule 14
	'head'         reduce using rule 14
	'if'           reduce using rule 14
	'let'          reduce using rule 14
	'or'           reduce using rule 14
	'tail'         reduce using rule 14
	'true'         reduce using rule 14
	L_Ident        reduce using rule 14
	L_integ        reduce using rule 14


State 28

	Expr -> 'tail' . Expr                               (rule 20)

	'!='           shift, and enter state 9
	'*'            shift, and enter state 10
	'+'            shift, and enter state 11
	'-'            shift, and enter state 12
	'//'           shift, and enter state 13
	'<'            shift, and enter state 14
	'<='           shift, and enter state 15
	'=='           shift, and enter state 16
	'>'            shift, and enter state 17
	'>='           shift, and enter state 18
	'['            shift, and enter state 19
	'\\'           shift, and enter state 20
	'and'          shift, and enter state 21
	'empty'        shift, and enter state 22
	'false'        shift, and enter state 23
	'head'         shift, and enter state 24
	'if'           shift, and enter state 25
	'let'          shift, and enter state 26
	'or'           shift, and enter state 27
	'tail'         shift, and enter state 28
	'true'         shift, and enter state 29
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 30

	Ident          goto state 3
	Integer        goto state 4
	ArOp           goto state 5
	CompOp         goto state 6
	BoolOp         goto state 7
	Expr           goto state 31

State 29

	Expr -> 'true' .                                    (rule 16)

	'!='           reduce using rule 16
	'*'            reduce using rule 16
	'+'            reduce using rule 16
	','            reduce using rule 16
	'-'            reduce using rule 16
	'//'           reduce using rule 16
	'<'            reduce using rule 16
	'<='           reduce using rule 16
	'=='           reduce using rule 16
	'>'            reduce using rule 16
	'>='           reduce using rule 16
	'['            reduce using rule 16
	'\\'           reduce using rule 16
	']'            reduce using rule 16
	'and'          reduce using rule 16
	'else'         reduce using rule 16
	'empty'        reduce using rule 16
	'endargs'      reduce using rule 16
	'endif'        reduce using rule 16
	'endlet'       reduce using rule 16
	'false'        reduce using rule 16
	'head'         reduce using rule 16
	'if'           reduce using rule 16
	'in'           reduce using rule 16
	'let'          reduce using rule 16
	'or'           reduce using rule 16
	'tail'         reduce using rule 16
	'then'         reduce using rule 16
	'true'         reduce using rule 16
	L_Ident        reduce using rule 16
	L_integ        reduce using rule 16
	%eof           reduce using rule 16


State 30

	Integer -> L_integ .                                (rule 2)

	'!='           reduce using rule 2
	'*'            reduce using rule 2
	'+'            reduce using rule 2
	','            reduce using rule 2
	'-'            reduce using rule 2
	'//'           reduce using rule 2
	'<'            reduce using rule 2
	'<='           reduce using rule 2
	'=='           reduce using rule 2
	'>'            reduce using rule 2
	'>='           reduce using rule 2
	'['            reduce using rule 2
	'\\'           reduce using rule 2
	']'            reduce using rule 2
	'and'          reduce using rule 2
	'else'         reduce using rule 2
	'empty'        reduce using rule 2
	'endargs'      reduce using rule 2
	'endif'        reduce using rule 2
	'endlet'       reduce using rule 2
	'false'        reduce using rule 2
	'head'         reduce using rule 2
	'if'           reduce using rule 2
	'in'           reduce using rule 2
	'let'          reduce using rule 2
	'or'           reduce using rule 2
	'tail'         reduce using rule 2
	'then'         reduce using rule 2
	'true'         reduce using rule 2
	L_Ident        reduce using rule 2
	L_integ        reduce using rule 2
	%eof           reduce using rule 2


State 31

	Expr -> 'tail' Expr .                               (rule 20)

	'!='           reduce using rule 20
	'*'            reduce using rule 20
	'+'            reduce using rule 20
	','            reduce using rule 20
	'-'            reduce using rule 20
	'//'           reduce using rule 20
	'<'            reduce using rule 20
	'<='           reduce using rule 20
	'=='           reduce using rule 20
	'>'            reduce using rule 20
	'>='           reduce using rule 20
	'['            reduce using rule 20
	'\\'           reduce using rule 20
	']'            reduce using rule 20
	'and'          reduce using rule 20
	'else'         reduce using rule 20
	'empty'        reduce using rule 20
	'endargs'      reduce using rule 20
	'endif'        reduce using rule 20
	'endlet'       reduce using rule 20
	'false'        reduce using rule 20
	'head'         reduce using rule 20
	'if'           reduce using rule 20
	'in'           reduce using rule 20
	'let'          reduce using rule 20
	'or'           reduce using rule 20
	'tail'         reduce using rule 20
	'then'         reduce using rule 20
	'true'         reduce using rule 20
	L_Ident        reduce using rule 20
	L_integ        reduce using rule 20
	%eof           reduce using rule 20


State 32

	Expr -> 'let' Ident . ListIdent '=' Expr 'in' Expr 'endlet'    (rule 29)

	'='            reduce using rule 33
	L_Ident        shift, and enter state 2

	Ident          goto state 49
	ListIdent      goto state 52

State 33

	Expr -> 'if' Expr . 'then' Expr 'else' Expr 'endif'    (rule 27)

	'then'         shift, and enter state 51


State 34

	Expr -> 'head' Expr .                               (rule 19)

	'!='           reduce using rule 19
	'*'            reduce using rule 19
	'+'            reduce using rule 19
	','            reduce using rule 19
	'-'            reduce using rule 19
	'//'           reduce using rule 19
	'<'            reduce using rule 19
	'<='           reduce using rule 19
	'=='           reduce using rule 19
	'>'            reduce using rule 19
	'>='           reduce using rule 19
	'['            reduce using rule 19
	'\\'           reduce using rule 19
	']'            reduce using rule 19
	'and'          reduce using rule 19
	'else'         reduce using rule 19
	'empty'        reduce using rule 19
	'endargs'      reduce using rule 19
	'endif'        reduce using rule 19
	'endlet'       reduce using rule 19
	'false'        reduce using rule 19
	'head'         reduce using rule 19
	'if'           reduce using rule 19
	'in'           reduce using rule 19
	'let'          reduce using rule 19
	'or'           reduce using rule 19
	'tail'         reduce using rule 19
	'then'         reduce using rule 19
	'true'         reduce using rule 19
	L_Ident        reduce using rule 19
	L_integ        reduce using rule 19
	%eof           reduce using rule 19


State 35

	Expr -> 'empty' Expr .                              (rule 21)

	'!='           reduce using rule 21
	'*'            reduce using rule 21
	'+'            reduce using rule 21
	','            reduce using rule 21
	'-'            reduce using rule 21
	'//'           reduce using rule 21
	'<'            reduce using rule 21
	'<='           reduce using rule 21
	'=='           reduce using rule 21
	'>'            reduce using rule 21
	'>='           reduce using rule 21
	'['            reduce using rule 21
	'\\'           reduce using rule 21
	']'            reduce using rule 21
	'and'          reduce using rule 21
	'else'         reduce using rule 21
	'empty'        reduce using rule 21
	'endargs'      reduce using rule 21
	'endif'        reduce using rule 21
	'endlet'       reduce using rule 21
	'false'        reduce using rule 21
	'head'         reduce using rule 21
	'if'           reduce using rule 21
	'in'           reduce using rule 21
	'let'          reduce using rule 21
	'or'           reduce using rule 21
	'tail'         reduce using rule 21
	'then'         reduce using rule 21
	'true'         reduce using rule 21
	L_Ident        reduce using rule 21
	L_integ        reduce using rule 21
	%eof           reduce using rule 21


State 36

	Expr -> '\\' Ident . ListIdent '->' Expr            (rule 25)

	'->'           reduce using rule 33
	L_Ident        shift, and enter state 2

	Ident          goto state 49
	ListIdent      goto state 50

State 37

	ListExpr -> Expr .                                  (rule 31)
	ListExpr -> Expr . ',' ListExpr                     (rule 32)

	','            shift, and enter state 48
	']'            reduce using rule 31
	'endargs'      reduce using rule 31


State 38

	Expr -> '[' ListExpr . ']'                          (rule 18)

	']'            shift, and enter state 47


State 39

	Expr -> BoolOp Expr . Expr                          (rule 24)

	'!='           shift, and enter state 9
	'*'            shift, and enter state 10
	'+'            shift, and enter state 11
	'-'            shift, and enter state 12
	'//'           shift, and enter state 13
	'<'            shift, and enter state 14
	'<='           shift, and enter state 15
	'=='           shift, and enter state 16
	'>'            shift, and enter state 17
	'>='           shift, and enter state 18
	'['            shift, and enter state 19
	'\\'           shift, and enter state 20
	'and'          shift, and enter state 21
	'empty'        shift, and enter state 22
	'false'        shift, and enter state 23
	'head'         shift, and enter state 24
	'if'           shift, and enter state 25
	'let'          shift, and enter state 26
	'or'           shift, and enter state 27
	'tail'         shift, and enter state 28
	'true'         shift, and enter state 29
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 30

	Ident          goto state 3
	Integer        goto state 4
	ArOp           goto state 5
	CompOp         goto state 6
	BoolOp         goto state 7
	Expr           goto state 46

State 40

	Expr -> CompOp Expr . Expr                          (rule 23)

	'!='           shift, and enter state 9
	'*'            shift, and enter state 10
	'+'            shift, and enter state 11
	'-'            shift, and enter state 12
	'//'           shift, and enter state 13
	'<'            shift, and enter state 14
	'<='           shift, and enter state 15
	'=='           shift, and enter state 16
	'>'            shift, and enter state 17
	'>='           shift, and enter state 18
	'['            shift, and enter state 19
	'\\'           shift, and enter state 20
	'and'          shift, and enter state 21
	'empty'        shift, and enter state 22
	'false'        shift, and enter state 23
	'head'         shift, and enter state 24
	'if'           shift, and enter state 25
	'let'          shift, and enter state 26
	'or'           shift, and enter state 27
	'tail'         shift, and enter state 28
	'true'         shift, and enter state 29
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 30

	Ident          goto state 3
	Integer        goto state 4
	ArOp           goto state 5
	CompOp         goto state 6
	BoolOp         goto state 7
	Expr           goto state 45

State 41

	Expr -> ArOp Expr . Expr                            (rule 22)

	'!='           shift, and enter state 9
	'*'            shift, and enter state 10
	'+'            shift, and enter state 11
	'-'            shift, and enter state 12
	'//'           shift, and enter state 13
	'<'            shift, and enter state 14
	'<='           shift, and enter state 15
	'=='           shift, and enter state 16
	'>'            shift, and enter state 17
	'>='           shift, and enter state 18
	'['            shift, and enter state 19
	'\\'           shift, and enter state 20
	'and'          shift, and enter state 21
	'empty'        shift, and enter state 22
	'false'        shift, and enter state 23
	'head'         shift, and enter state 24
	'if'           shift, and enter state 25
	'let'          shift, and enter state 26
	'or'           shift, and enter state 27
	'tail'         shift, and enter state 28
	'true'         shift, and enter state 29
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 30

	Ident          goto state 3
	Integer        goto state 4
	ArOp           goto state 5
	CompOp         goto state 6
	BoolOp         goto state 7
	Expr           goto state 44

State 42

	Expr -> Ident 'args' . ListExpr 'endargs'           (rule 26)

	'!='           shift, and enter state 9
	'*'            shift, and enter state 10
	'+'            shift, and enter state 11
	'-'            shift, and enter state 12
	'//'           shift, and enter state 13
	'<'            shift, and enter state 14
	'<='           shift, and enter state 15
	'=='           shift, and enter state 16
	'>'            shift, and enter state 17
	'>='           shift, and enter state 18
	'['            shift, and enter state 19
	'\\'           shift, and enter state 20
	'and'          shift, and enter state 21
	'empty'        shift, and enter state 22
	'endargs'      reduce using rule 30
	'false'        shift, and enter state 23
	'head'         shift, and enter state 24
	'if'           shift, and enter state 25
	'let'          shift, and enter state 26
	'or'           shift, and enter state 27
	'tail'         shift, and enter state 28
	'true'         shift, and enter state 29
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 30

	Ident          goto state 3
	Integer        goto state 4
	ArOp           goto state 5
	CompOp         goto state 6
	BoolOp         goto state 7
	Expr           goto state 37
	ListExpr       goto state 43

State 43

	Expr -> Ident 'args' ListExpr . 'endargs'           (rule 26)

	'endargs'      shift, and enter state 58


State 44

	Expr -> ArOp Expr Expr .                            (rule 22)

	'!='           reduce using rule 22
	'*'            reduce using rule 22
	'+'            reduce using rule 22
	','            reduce using rule 22
	'-'            reduce using rule 22
	'//'           reduce using rule 22
	'<'            reduce using rule 22
	'<='           reduce using rule 22
	'=='           reduce using rule 22
	'>'            reduce using rule 22
	'>='           reduce using rule 22
	'['            reduce using rule 22
	'\\'           reduce using rule 22
	']'            reduce using rule 22
	'and'          reduce using rule 22
	'else'         reduce using rule 22
	'empty'        reduce using rule 22
	'endargs'      reduce using rule 22
	'endif'        reduce using rule 22
	'endlet'       reduce using rule 22
	'false'        reduce using rule 22
	'head'         reduce using rule 22
	'if'           reduce using rule 22
	'in'           reduce using rule 22
	'let'          reduce using rule 22
	'or'           reduce using rule 22
	'tail'         reduce using rule 22
	'then'         reduce using rule 22
	'true'         reduce using rule 22
	L_Ident        reduce using rule 22
	L_integ        reduce using rule 22
	%eof           reduce using rule 22


State 45

	Expr -> CompOp Expr Expr .                          (rule 23)

	'!='           reduce using rule 23
	'*'            reduce using rule 23
	'+'            reduce using rule 23
	','            reduce using rule 23
	'-'            reduce using rule 23
	'//'           reduce using rule 23
	'<'            reduce using rule 23
	'<='           reduce using rule 23
	'=='           reduce using rule 23
	'>'            reduce using rule 23
	'>='           reduce using rule 23
	'['            reduce using rule 23
	'\\'           reduce using rule 23
	']'            reduce using rule 23
	'and'          reduce using rule 23
	'else'         reduce using rule 23
	'empty'        reduce using rule 23
	'endargs'      reduce using rule 23
	'endif'        reduce using rule 23
	'endlet'       reduce using rule 23
	'false'        reduce using rule 23
	'head'         reduce using rule 23
	'if'           reduce using rule 23
	'in'           reduce using rule 23
	'let'          reduce using rule 23
	'or'           reduce using rule 23
	'tail'         reduce using rule 23
	'then'         reduce using rule 23
	'true'         reduce using rule 23
	L_Ident        reduce using rule 23
	L_integ        reduce using rule 23
	%eof           reduce using rule 23


State 46

	Expr -> BoolOp Expr Expr .                          (rule 24)

	'!='           reduce using rule 24
	'*'            reduce using rule 24
	'+'            reduce using rule 24
	','            reduce using rule 24
	'-'            reduce using rule 24
	'//'           reduce using rule 24
	'<'            reduce using rule 24
	'<='           reduce using rule 24
	'=='           reduce using rule 24
	'>'            reduce using rule 24
	'>='           reduce using rule 24
	'['            reduce using rule 24
	'\\'           reduce using rule 24
	']'            reduce using rule 24
	'and'          reduce using rule 24
	'else'         reduce using rule 24
	'empty'        reduce using rule 24
	'endargs'      reduce using rule 24
	'endif'        reduce using rule 24
	'endlet'       reduce using rule 24
	'false'        reduce using rule 24
	'head'         reduce using rule 24
	'if'           reduce using rule 24
	'in'           reduce using rule 24
	'let'          reduce using rule 24
	'or'           reduce using rule 24
	'tail'         reduce using rule 24
	'then'         reduce using rule 24
	'true'         reduce using rule 24
	L_Ident        reduce using rule 24
	L_integ        reduce using rule 24
	%eof           reduce using rule 24


State 47

	Expr -> '[' ListExpr ']' .                          (rule 18)

	'!='           reduce using rule 18
	'*'            reduce using rule 18
	'+'            reduce using rule 18
	','            reduce using rule 18
	'-'            reduce using rule 18
	'//'           reduce using rule 18
	'<'            reduce using rule 18
	'<='           reduce using rule 18
	'=='           reduce using rule 18
	'>'            reduce using rule 18
	'>='           reduce using rule 18
	'['            reduce using rule 18
	'\\'           reduce using rule 18
	']'            reduce using rule 18
	'and'          reduce using rule 18
	'else'         reduce using rule 18
	'empty'        reduce using rule 18
	'endargs'      reduce using rule 18
	'endif'        reduce using rule 18
	'endlet'       reduce using rule 18
	'false'        reduce using rule 18
	'head'         reduce using rule 18
	'if'           reduce using rule 18
	'in'           reduce using rule 18
	'let'          reduce using rule 18
	'or'           reduce using rule 18
	'tail'         reduce using rule 18
	'then'         reduce using rule 18
	'true'         reduce using rule 18
	L_Ident        reduce using rule 18
	L_integ        reduce using rule 18
	%eof           reduce using rule 18


State 48

	ListExpr -> Expr ',' . ListExpr                     (rule 32)

	'!='           shift, and enter state 9
	'*'            shift, and enter state 10
	'+'            shift, and enter state 11
	'-'            shift, and enter state 12
	'//'           shift, and enter state 13
	'<'            shift, and enter state 14
	'<='           shift, and enter state 15
	'=='           shift, and enter state 16
	'>'            shift, and enter state 17
	'>='           shift, and enter state 18
	'['            shift, and enter state 19
	'\\'           shift, and enter state 20
	']'            reduce using rule 30
	'and'          shift, and enter state 21
	'empty'        shift, and enter state 22
	'endargs'      reduce using rule 30
	'false'        shift, and enter state 23
	'head'         shift, and enter state 24
	'if'           shift, and enter state 25
	'let'          shift, and enter state 26
	'or'           shift, and enter state 27
	'tail'         shift, and enter state 28
	'true'         shift, and enter state 29
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 30

	Ident          goto state 3
	Integer        goto state 4
	ArOp           goto state 5
	CompOp         goto state 6
	BoolOp         goto state 7
	Expr           goto state 37
	ListExpr       goto state 57

State 49

	ListIdent -> Ident . ListIdent                      (rule 34)

	'->'           reduce using rule 33
	'='            reduce using rule 33
	L_Ident        shift, and enter state 2

	Ident          goto state 49
	ListIdent      goto state 56

State 50

	Expr -> '\\' Ident ListIdent . '->' Expr            (rule 25)

	'->'           shift, and enter state 55


State 51

	Expr -> 'if' Expr 'then' . Expr 'else' Expr 'endif'    (rule 27)

	'!='           shift, and enter state 9
	'*'            shift, and enter state 10
	'+'            shift, and enter state 11
	'-'            shift, and enter state 12
	'//'           shift, and enter state 13
	'<'            shift, and enter state 14
	'<='           shift, and enter state 15
	'=='           shift, and enter state 16
	'>'            shift, and enter state 17
	'>='           shift, and enter state 18
	'['            shift, and enter state 19
	'\\'           shift, and enter state 20
	'and'          shift, and enter state 21
	'empty'        shift, and enter state 22
	'false'        shift, and enter state 23
	'head'         shift, and enter state 24
	'if'           shift, and enter state 25
	'let'          shift, and enter state 26
	'or'           shift, and enter state 27
	'tail'         shift, and enter state 28
	'true'         shift, and enter state 29
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 30

	Ident          goto state 3
	Integer        goto state 4
	ArOp           goto state 5
	CompOp         goto state 6
	BoolOp         goto state 7
	Expr           goto state 54

State 52

	Expr -> 'let' Ident ListIdent . '=' Expr 'in' Expr 'endlet'    (rule 29)

	'='            shift, and enter state 53


State 53

	Expr -> 'let' Ident ListIdent '=' . Expr 'in' Expr 'endlet'    (rule 29)

	'!='           shift, and enter state 9
	'*'            shift, and enter state 10
	'+'            shift, and enter state 11
	'-'            shift, and enter state 12
	'//'           shift, and enter state 13
	'<'            shift, and enter state 14
	'<='           shift, and enter state 15
	'=='           shift, and enter state 16
	'>'            shift, and enter state 17
	'>='           shift, and enter state 18
	'['            shift, and enter state 19
	'\\'           shift, and enter state 20
	'and'          shift, and enter state 21
	'empty'        shift, and enter state 22
	'false'        shift, and enter state 23
	'head'         shift, and enter state 24
	'if'           shift, and enter state 25
	'let'          shift, and enter state 26
	'or'           shift, and enter state 27
	'tail'         shift, and enter state 28
	'true'         shift, and enter state 29
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 30

	Ident          goto state 3
	Integer        goto state 4
	ArOp           goto state 5
	CompOp         goto state 6
	BoolOp         goto state 7
	Expr           goto state 61

State 54

	Expr -> 'if' Expr 'then' Expr . 'else' Expr 'endif'    (rule 27)

	'else'         shift, and enter state 60


State 55

	Expr -> '\\' Ident ListIdent '->' . Expr            (rule 25)

	'!='           shift, and enter state 9
	'*'            shift, and enter state 10
	'+'            shift, and enter state 11
	'-'            shift, and enter state 12
	'//'           shift, and enter state 13
	'<'            shift, and enter state 14
	'<='           shift, and enter state 15
	'=='           shift, and enter state 16
	'>'            shift, and enter state 17
	'>='           shift, and enter state 18
	'['            shift, and enter state 19
	'\\'           shift, and enter state 20
	'and'          shift, and enter state 21
	'empty'        shift, and enter state 22
	'false'        shift, and enter state 23
	'head'         shift, and enter state 24
	'if'           shift, and enter state 25
	'let'          shift, and enter state 26
	'or'           shift, and enter state 27
	'tail'         shift, and enter state 28
	'true'         shift, and enter state 29
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 30

	Ident          goto state 3
	Integer        goto state 4
	ArOp           goto state 5
	CompOp         goto state 6
	BoolOp         goto state 7
	Expr           goto state 59

State 56

	ListIdent -> Ident ListIdent .                      (rule 34)

	'->'           reduce using rule 34
	'='            reduce using rule 34


State 57

	ListExpr -> Expr ',' ListExpr .                     (rule 32)

	']'            reduce using rule 32
	'endargs'      reduce using rule 32


State 58

	Expr -> Ident 'args' ListExpr 'endargs' .           (rule 26)

	'!='           reduce using rule 26
	'*'            reduce using rule 26
	'+'            reduce using rule 26
	','            reduce using rule 26
	'-'            reduce using rule 26
	'//'           reduce using rule 26
	'<'            reduce using rule 26
	'<='           reduce using rule 26
	'=='           reduce using rule 26
	'>'            reduce using rule 26
	'>='           reduce using rule 26
	'['            reduce using rule 26
	'\\'           reduce using rule 26
	']'            reduce using rule 26
	'and'          reduce using rule 26
	'else'         reduce using rule 26
	'empty'        reduce using rule 26
	'endargs'      reduce using rule 26
	'endif'        reduce using rule 26
	'endlet'       reduce using rule 26
	'false'        reduce using rule 26
	'head'         reduce using rule 26
	'if'           reduce using rule 26
	'in'           reduce using rule 26
	'let'          reduce using rule 26
	'or'           reduce using rule 26
	'tail'         reduce using rule 26
	'then'         reduce using rule 26
	'true'         reduce using rule 26
	L_Ident        reduce using rule 26
	L_integ        reduce using rule 26
	%eof           reduce using rule 26


State 59

	Expr -> '\\' Ident ListIdent '->' Expr .            (rule 25)

	'!='           reduce using rule 25
	'*'            reduce using rule 25
	'+'            reduce using rule 25
	','            reduce using rule 25
	'-'            reduce using rule 25
	'//'           reduce using rule 25
	'<'            reduce using rule 25
	'<='           reduce using rule 25
	'=='           reduce using rule 25
	'>'            reduce using rule 25
	'>='           reduce using rule 25
	'['            reduce using rule 25
	'\\'           reduce using rule 25
	']'            reduce using rule 25
	'and'          reduce using rule 25
	'else'         reduce using rule 25
	'empty'        reduce using rule 25
	'endargs'      reduce using rule 25
	'endif'        reduce using rule 25
	'endlet'       reduce using rule 25
	'false'        reduce using rule 25
	'head'         reduce using rule 25
	'if'           reduce using rule 25
	'in'           reduce using rule 25
	'let'          reduce using rule 25
	'or'           reduce using rule 25
	'tail'         reduce using rule 25
	'then'         reduce using rule 25
	'true'         reduce using rule 25
	L_Ident        reduce using rule 25
	L_integ        reduce using rule 25
	%eof           reduce using rule 25


State 60

	Expr -> 'if' Expr 'then' Expr 'else' . Expr 'endif'    (rule 27)

	'!='           shift, and enter state 9
	'*'            shift, and enter state 10
	'+'            shift, and enter state 11
	'-'            shift, and enter state 12
	'//'           shift, and enter state 13
	'<'            shift, and enter state 14
	'<='           shift, and enter state 15
	'=='           shift, and enter state 16
	'>'            shift, and enter state 17
	'>='           shift, and enter state 18
	'['            shift, and enter state 19
	'\\'           shift, and enter state 20
	'and'          shift, and enter state 21
	'empty'        shift, and enter state 22
	'false'        shift, and enter state 23
	'head'         shift, and enter state 24
	'if'           shift, and enter state 25
	'let'          shift, and enter state 26
	'or'           shift, and enter state 27
	'tail'         shift, and enter state 28
	'true'         shift, and enter state 29
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 30

	Ident          goto state 3
	Integer        goto state 4
	ArOp           goto state 5
	CompOp         goto state 6
	BoolOp         goto state 7
	Expr           goto state 63

State 61

	Expr -> 'let' Ident ListIdent '=' Expr . 'in' Expr 'endlet'    (rule 29)

	'in'           shift, and enter state 62


State 62

	Expr -> 'let' Ident ListIdent '=' Expr 'in' . Expr 'endlet'    (rule 29)

	'!='           shift, and enter state 9
	'*'            shift, and enter state 10
	'+'            shift, and enter state 11
	'-'            shift, and enter state 12
	'//'           shift, and enter state 13
	'<'            shift, and enter state 14
	'<='           shift, and enter state 15
	'=='           shift, and enter state 16
	'>'            shift, and enter state 17
	'>='           shift, and enter state 18
	'['            shift, and enter state 19
	'\\'           shift, and enter state 20
	'and'          shift, and enter state 21
	'empty'        shift, and enter state 22
	'false'        shift, and enter state 23
	'head'         shift, and enter state 24
	'if'           shift, and enter state 25
	'let'          shift, and enter state 26
	'or'           shift, and enter state 27
	'tail'         shift, and enter state 28
	'true'         shift, and enter state 29
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 30

	Ident          goto state 3
	Integer        goto state 4
	ArOp           goto state 5
	CompOp         goto state 6
	BoolOp         goto state 7
	Expr           goto state 65

State 63

	Expr -> 'if' Expr 'then' Expr 'else' Expr . 'endif'    (rule 27)

	'endif'        shift, and enter state 64


State 64

	Expr -> 'if' Expr 'then' Expr 'else' Expr 'endif' .    (rule 27)

	'!='           reduce using rule 27
	'*'            reduce using rule 27
	'+'            reduce using rule 27
	','            reduce using rule 27
	'-'            reduce using rule 27
	'//'           reduce using rule 27
	'<'            reduce using rule 27
	'<='           reduce using rule 27
	'=='           reduce using rule 27
	'>'            reduce using rule 27
	'>='           reduce using rule 27
	'['            reduce using rule 27
	'\\'           reduce using rule 27
	']'            reduce using rule 27
	'and'          reduce using rule 27
	'else'         reduce using rule 27
	'empty'        reduce using rule 27
	'endargs'      reduce using rule 27
	'endif'        reduce using rule 27
	'endlet'       reduce using rule 27
	'false'        reduce using rule 27
	'head'         reduce using rule 27
	'if'           reduce using rule 27
	'in'           reduce using rule 27
	'let'          reduce using rule 27
	'or'           reduce using rule 27
	'tail'         reduce using rule 27
	'then'         reduce using rule 27
	'true'         reduce using rule 27
	L_Ident        reduce using rule 27
	L_integ        reduce using rule 27
	%eof           reduce using rule 27


State 65

	Expr -> 'let' Ident ListIdent '=' Expr 'in' Expr . 'endlet'    (rule 29)

	'endlet'       shift, and enter state 66


State 66

	Expr -> 'let' Ident ListIdent '=' Expr 'in' Expr 'endlet' .    (rule 29)

	'!='           reduce using rule 29
	'*'            reduce using rule 29
	'+'            reduce using rule 29
	','            reduce using rule 29
	'-'            reduce using rule 29
	'//'           reduce using rule 29
	'<'            reduce using rule 29
	'<='           reduce using rule 29
	'=='           reduce using rule 29
	'>'            reduce using rule 29
	'>='           reduce using rule 29
	'['            reduce using rule 29
	'\\'           reduce using rule 29
	']'            reduce using rule 29
	'and'          reduce using rule 29
	'else'         reduce using rule 29
	'empty'        reduce using rule 29
	'endargs'      reduce using rule 29
	'endif'        reduce using rule 29
	'endlet'       reduce using rule 29
	'false'        reduce using rule 29
	'head'         reduce using rule 29
	'if'           reduce using rule 29
	'in'           reduce using rule 29
	'let'          reduce using rule 29
	'or'           reduce using rule 29
	'tail'         reduce using rule 29
	'then'         reduce using rule 29
	'true'         reduce using rule 29
	L_Ident        reduce using rule 29
	L_integ        reduce using rule 29
	%eof           reduce using rule 29


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 35
Number of terminals: 34
Number of non-terminals: 9
Number of states: 67
