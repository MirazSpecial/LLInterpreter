-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.4).

-- Parser definition for use with Happy
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module ParGrammer
  ( happyError
  , myLexer
  , pExpr
  ) where

import Prelude

import qualified AbsGrammer
import LexGrammer

}

%name pExpr Expr
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '!='      { PT _ (TS _ 1)  }
  '*'       { PT _ (TS _ 2)  }
  '+'       { PT _ (TS _ 3)  }
  ','       { PT _ (TS _ 4)  }
  '-'       { PT _ (TS _ 5)  }
  '->'      { PT _ (TS _ 6)  }
  '//'      { PT _ (TS _ 7)  }
  '<'       { PT _ (TS _ 8)  }
  '<='      { PT _ (TS _ 9)  }
  '='       { PT _ (TS _ 10) }
  '=='      { PT _ (TS _ 11) }
  '>'       { PT _ (TS _ 12) }
  '>='      { PT _ (TS _ 13) }
  '['       { PT _ (TS _ 14) }
  '\\'      { PT _ (TS _ 15) }
  ']'       { PT _ (TS _ 16) }
  'and'     { PT _ (TS _ 17) }
  'args'    { PT _ (TS _ 18) }
  'else'    { PT _ (TS _ 19) }
  'empty'   { PT _ (TS _ 20) }
  'endargs' { PT _ (TS _ 21) }
  'endif'   { PT _ (TS _ 22) }
  'endlet'  { PT _ (TS _ 23) }
  'false'   { PT _ (TS _ 24) }
  'head'    { PT _ (TS _ 25) }
  'if'      { PT _ (TS _ 26) }
  'in'      { PT _ (TS _ 27) }
  'let'     { PT _ (TS _ 28) }
  'or'      { PT _ (TS _ 29) }
  'tail'    { PT _ (TS _ 30) }
  'then'    { PT _ (TS _ 31) }
  'true'    { PT _ (TS _ 32) }
  L_Ident   { PT _ (TV $$)   }
  L_integ   { PT _ (TI $$)   }

%%

Ident :: { AbsGrammer.Ident }
Ident  : L_Ident { AbsGrammer.Ident $1 }

Integer :: { Integer }
Integer  : L_integ  { (read $1) :: Integer }

ArOp :: { AbsGrammer.ArOp }
ArOp
  : '+' { AbsGrammer.OpAdd }
  | '-' { AbsGrammer.OpSub }
  | '*' { AbsGrammer.OpMul }
  | '//' { AbsGrammer.OpDiv }

CompOp :: { AbsGrammer.CompOp }
CompOp
  : '==' { AbsGrammer.OpEq }
  | '!=' { AbsGrammer.OpNeq }
  | '>' { AbsGrammer.OpGr }
  | '>=' { AbsGrammer.OpGeq }
  | '<' { AbsGrammer.OpLe }
  | '<=' { AbsGrammer.OpLeq }

BoolOp :: { AbsGrammer.BoolOp }
BoolOp : 'and' { AbsGrammer.OpAnd } | 'or' { AbsGrammer.OpOr }

Expr :: { AbsGrammer.Expr }
Expr
  : Integer { AbsGrammer.ELitInt $1 }
  | 'true' { AbsGrammer.ELitTrue }
  | 'false' { AbsGrammer.ELitFalse }
  | '[' ListExpr ']' { AbsGrammer.EList $2 }
  | 'head' Expr { AbsGrammer.EListHead $2 }
  | 'tail' Expr { AbsGrammer.EListTail $2 }
  | 'empty' Expr { AbsGrammer.EListEmpty $2 }
  | ArOp Expr Expr { AbsGrammer.EArOp $1 $2 $3 }
  | CompOp Expr Expr { AbsGrammer.ECompOp $1 $2 $3 }
  | BoolOp Expr Expr { AbsGrammer.EBoolOp $1 $2 $3 }
  | '\\' Ident ListIdent '->' Expr { AbsGrammer.EAnonFun $2 $3 $5 }
  | Ident 'args' ListExpr 'endargs' { AbsGrammer.EApp $1 $3 }
  | 'if' Expr 'then' Expr 'else' Expr 'endif' { AbsGrammer.EIf $2 $4 $6 }
  | Ident { AbsGrammer.EVar $1 }
  | 'let' Ident ListIdent '=' Expr 'in' Expr 'endlet' { AbsGrammer.ELet $2 $3 $5 $7 }

ListExpr :: { [AbsGrammer.Expr] }
ListExpr
  : {- empty -} { [] }
  | Expr { (:[]) $1 }
  | Expr ',' ListExpr { (:) $1 $3 }

ListIdent :: { [AbsGrammer.Ident] }
ListIdent : {- empty -} { [] } | Ident ListIdent { (:) $1 $2 }

{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

}

